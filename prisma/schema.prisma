// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Committee {
  id        String   @id @default(uuid())
  name      String
  title     String
  year      String
  email     String
  imageUrl  String
  order     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id               String             @id @default(uuid())
  title            String
  description      String             @db.Text
  date             DateTime
  venue            String
  isArchived       Boolean
  imageUrl         String
  link             String
  eventdescription EventDescription[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model EventDescription {
  id                      String                    @id @default(uuid())
  title                   String
  order                   String
  eventDescriptionContent EventDescriptionContent[]
  eventId                 String
  Event                   Event                     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt

  @@index([eventId])
}

model EventDescriptionContent {
  id                 String           @id @default(uuid())
  description        String
  order              String
  eventDescriptionId String
  EventDescription   EventDescription @relation(fields: [eventDescriptionId], references: [id], onDelete: Cascade)

  @@index([eventDescriptionId])
}

model Position {
  id          String   @id @default(uuid())
  title       String
  description String
  link        String
  isArchived  Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Blog {
  id            String   @id @default(uuid())
  title         String
  content       String   @db.Text
  date          DateTime
  venue         String
  year          String
  coverImageUrl String
  images        Image[]
  isArchived    Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([blogId])
}

model EmailSubcription {
  id        String   @id @default(uuid())
  email     String
  createdAt DateTime @default(now())
}

model NoticeBoard {
  id          String   @id @default(uuid())
  title       String
  description String
  buttonText  String
  link        String
  isArchived  Boolean
  createdAt   DateTime @default(now())
}

model Faq {
  id        String   @id @default(uuid())
  question  String   @db.Text
  answer    String    @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Partner {
  id        String   @id @default(uuid())
  name      String
  imageUrl  String
  createdAt DateTime @default(now())
}
